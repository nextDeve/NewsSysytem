{"version":3,"file":"static/js/57.d6c8a110.chunk.js","mappings":"uaAUQA,EAASC,EAAAA,EAAAA,KAGF,SAASC,IACpB,MAAuCC,KAAKC,MAAMC,aAAaC,QAAQ,UAA/DC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,OAC5B,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAKG,EAAL,KAAeC,EAAf,KACA,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAKK,EAAL,KAAcC,EAAd,KACA,GAAiCN,EAAAA,EAAAA,UAAS,IAA1C,eAAKO,EAAL,KAAgBC,EAAhB,KACA,GAA4BR,EAAAA,EAAAA,UAAS,IAArC,eAAKS,EAAL,KAAcC,EAAd,KACA,GAA4BV,EAAAA,EAAAA,YAA5B,eAAKW,EAAL,KAAcC,EAAd,KACA,GAA8BZ,EAAAA,EAAAA,YAA9B,eAAKa,EAAL,KAAeC,EAAf,KACMC,GAAUC,EAAAA,EAAAA,aACVC,GAAUD,EAAAA,EAAAA,cAChBE,EAAAA,EAAAA,YAAU,WACNC,IAAAA,IAAU,yBAA0B,CAAEC,OAAQ,CAAEC,SAAU,KAAOC,MAAK,SAACC,GACnErB,EAAYqB,EAAIC,SAEpBL,IAAAA,IAAU,yBAA0B,CAAEC,OAAQ,CAAEC,SAAU,KAAOC,MAAK,SAACC,GACnEnB,EAAYmB,EAAIC,SAEpBL,IAAAA,IAAU,qBAAqBG,MAAK,SAACC,GACjCf,EAAce,EAAIC,SAEtBL,IAAAA,IAAU,4BAA6B,CAAEC,OAAQ,CAAEK,OAAQ5B,KAAcyB,MAAK,SAACC,GAC3Eb,EAAWa,EAAIC,WAEpB,CAAC3B,KACJqB,EAAAA,EAAAA,YAAU,WACN,IAAMQ,EAAS,CACXC,MAAO,CACHC,KAAM,wCAEVC,QAAS,CACLC,QAAS,OACTC,YAAa,CACTC,KAAM,SACNC,MAAO,CACHC,MAAM,KAIlBC,KAAM,CACFC,KAAM,KACNC,MAAO,KACPC,OAAQ,KACRC,cAAc,GAElBC,MAAO,CACH,CACIR,KAAM,WACNS,KAAM,eACNjB,KAAMjB,EAAUmC,EAChBC,SAAU,CACNC,gBAAgB,KAI5BC,MAAO,CACH,CACIb,KAAM,QACNS,KAAM,sBACNK,YAAa,IAGrBC,OAAQ,CACJ,CACIN,KAAM,eACNT,KAAM,MACNgB,SAAU,MACVxB,KAAMjB,EAAU0C,UAIZC,IAAZvC,GACAC,EAAWuC,EAAAA,GAAapC,EAAQqC,UAEhCzC,GAASA,EAAQ0C,UAAU3B,GAAQ,KACxC,CAACnB,EAAWQ,EAASJ,IAOxB2C,OAAOC,SAAW,WACd5C,EAAQ6C,UAkCZ,OACI,UAAC,EAAAC,SAAD,YACI,UAAC,IAAD,CAAKC,OAAQ,GAAb,WACI,SAAC,IAAD,CAAKC,KAAM,EAAX,UACI,SAAC,IAAD,CAAMhC,MAAM,uCAAZ,UACI,SAAC,KAAD,CACIiC,WAAY3D,EACZ4D,WAAY,SAAAC,GAAI,OACZ,UAAC,UAAD,YACI,SAAC,KAAD,CAAMC,GAAE,+BAA0BD,EAAKE,IAAMC,MAAOH,EAApD,SAA2DA,EAAKnC,SAChE,SAAC,IAAD,CAAKuC,MAAM,OAAX,SAAmBJ,EAAKK,kBAM5C,SAAC,IAAD,CAAKR,KAAM,EAAX,UACI,SAAC,IAAD,CAAMhC,MAAM,uCAAZ,UACI,SAAC,KAAD,CACIiC,WAAYzD,EACZ0D,WAAY,SAAAC,GAAI,OACZ,UAAC,UAAD,YACI,SAAC,KAAD,CAAMC,GAAE,+BAA0BD,EAAKE,IAAMC,MAAOH,EAApD,SAA2DA,EAAKnC,SAChE,SAAC,IAAD,CAAKuC,MAAM,SAAX,SAAqBJ,EAAKM,kBAM9C,UAAC,IAAD,CAAKT,KAAM,EAAX,WACI,SAAC,IAAD,CACIU,OACI,gBACIC,IAAI,UACJC,IAAI,wEAGZC,QAAS,EACL,SAAC,IAAD,CAAgCC,QA/ErC,WACfnE,GAAW,KA8E+B,YACtB,SAAC,IAAD,GAAkB,SAClB,SAAC,IAAD,GAAsB,aAV9B,UAaI,SAAChB,EAAD,CACIoF,QAAQ,SAAC,IAAD,CAAQH,IAAI,uCACpB5C,MAAO9B,EACP8E,YAAW,UAAgB,KAAX5E,EAAgB,eAAOA,EAA5B,aAAuCD,OAjB9D,WAqBJ,gBAAK8E,MAAO,CAAEC,OAAQ,QAASC,MAAO,QAAUC,IAAKhE,KACrD,SAAC,IAAD,CAAQY,MAAM,2BAAOqD,UAAU,QAAQC,QAzF/B,WACZ3E,GAAW,IAwFkDD,QAASA,EAASyE,MAAO,IAAKI,mBAnF/E,WACZ,IAAIC,EACEzD,EAAS,CACXC,MAAO,CACHC,KAAM,+DACNQ,KAAM,UAEVP,QAAS,CACLC,QAAS,QAEbiB,OAAQ,CACJ,CACIN,KAAM,2BACNT,KAAM,MACNoD,OAAQ,MACR5D,KAAMf,EACN4E,SAAU,CACNC,UAAW,CACPC,WAAY,GACZC,cAAe,EACfC,YAAa,+BAMhBvC,IAAbrC,IACAsE,EAAQhC,EAAAA,GAAalC,EAAQmC,SAC7BtC,EAAYqE,IAEZA,GAAOA,EAAM9B,UAAU3B,GAAQ,IAqD/B,UACI,gBAAKkD,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAAUC,IAAK9D,SA3KpEkC,EAAAA,EAAY,CAACuC,EAAAA,EAAkBC,EAAAA,EAAeC,EAAAA,EAAUC,EAAAA,EAAgBC,EAAAA,EAAgBC,EAAAA,EAAUC,EAAAA,EAAaC,EAAAA","sources":["views/NewsSandBox/Home/index.jsx"],"sourcesContent":["import React, { useEffect, useState, Fragment, createRef } from 'react'\r\nimport { Row, Col, Card, Avatar, List, Drawer, Tag } from 'antd'\r\nimport { EditOutlined, EllipsisOutlined, BarChartOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom'\r\nimport * as echarts from 'echarts/core';\r\nimport { TooltipComponent, GridComponent, TitleComponent, LegendComponent } from 'echarts/components';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { PieChart, BarChart } from 'echarts/charts';\r\nimport { LabelLayout } from 'echarts/features';\r\nconst { Meta } = Card;\r\necharts.use([TooltipComponent, GridComponent, BarChart, CanvasRenderer, TitleComponent, PieChart, LabelLayout, LegendComponent]);\r\n\r\nexport default function Home() {\r\n    const { username, roleType, region } = JSON.parse(localStorage.getItem('token'))\r\n    let [viewList, setViewList] = useState([])\r\n    let [likeList, setLikeList] = useState([])\r\n    let [visible, setVisible] = useState(false);\r\n    let [countInfo, setConuntInfo] = useState([])\r\n    let [pieInfo, setPieInfo] = useState([])\r\n    let [myChart, setMyChart] = useState()\r\n    let [pieChart, setPieChart] = useState()\r\n    const barDemo = createRef()\r\n    const PieDemo = createRef()\r\n    useEffect(() => {\r\n        axios.get('/api/getNewsBySortType', { params: { sortType: 1 } }).then((res) => {\r\n            setViewList(res.data)\r\n        })\r\n        axios.get('/api/getNewsBySortType', { params: { sortType: 2 } }).then((res) => {\r\n            setLikeList(res.data)\r\n        })\r\n        axios.get('/api/getCountInfo').then((res) => {\r\n            setConuntInfo(res.data)\r\n        })\r\n        axios.get('/api/getCountInfoByAuthor', { params: { author: username } }).then((res) => {\r\n            setPieInfo(res.data)\r\n        })\r\n    }, [username])\r\n    useEffect(() => {\r\n        const option = {\r\n            title: {\r\n                text: '新闻分类图示'\r\n            },\r\n            tooltip: {\r\n                trigger: 'axis',\r\n                axisPointer: {\r\n                    type: 'shadow',\r\n                    label: {\r\n                        show: true\r\n                    }\r\n                }\r\n            },\r\n            grid: {\r\n                left: '3%',\r\n                right: '4%',\r\n                bottom: '3%',\r\n                containLabel: true\r\n            },\r\n            xAxis: [\r\n                {\r\n                    type: 'category',\r\n                    name: '类别',\r\n                    data: countInfo.x,\r\n                    axisTick: {\r\n                        alignWithLabel: true\r\n                    }\r\n                }\r\n            ],\r\n            yAxis: [\r\n                {\r\n                    type: 'value',\r\n                    name: '数量/篇',\r\n                    minInterval: 1\r\n                }\r\n            ],\r\n            series: [\r\n                {\r\n                    name: '数量',\r\n                    type: 'bar',\r\n                    barWidth: '60%',\r\n                    data: countInfo.y\r\n                }\r\n            ]\r\n        };\r\n        if (myChart === undefined) {\r\n            setMyChart(echarts.init(barDemo.current))\r\n        }\r\n        if (myChart) myChart.setOption(option, true);\r\n    }, [countInfo, barDemo, myChart])\r\n    const showDrawer = () => {\r\n        setVisible(true);\r\n    };\r\n    const onClose = () => {\r\n        setVisible(false);\r\n    };\r\n    window.onresize = () => {\r\n        myChart.resize()\r\n    }\r\n    const showPie = () => {\r\n        let Chart;\r\n        const option = {\r\n            title: {\r\n                text: '当前用户新闻分类图示',\r\n                left: 'center'\r\n            },\r\n            tooltip: {\r\n                trigger: 'item'\r\n            },\r\n            series: [\r\n                {\r\n                    name: '发布数量',\r\n                    type: 'pie',\r\n                    radius: '50%',\r\n                    data: pieInfo,\r\n                    emphasis: {\r\n                        itemStyle: {\r\n                            shadowBlur: 10,\r\n                            shadowOffsetX: 0,\r\n                            shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n        if (pieChart === undefined) {\r\n            Chart = echarts.init(PieDemo.current)\r\n            setPieChart(Chart)\r\n        }\r\n        if (Chart) Chart.setOption(option, true)\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Row gutter={10}>\r\n                <Col span={8} >\r\n                    <Card title=\"用户最常浏览\" >\r\n                        <List\r\n                            dataSource={viewList}\r\n                            renderItem={item => (\r\n                                <List.Item>\r\n                                    <Link to={`/news-manage/preview/${item.id}`} state={item}>{item.title}</Link>\r\n                                    <Tag color='cyan'>{item.view}</Tag>\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <Card title=\"用户点赞最多\" >\r\n                        <List\r\n                            dataSource={likeList}\r\n                            renderItem={item => (\r\n                                <List.Item>\r\n                                    <Link to={`/news-manage/preview/${item.id}`} state={item}>{item.title}</Link>\r\n                                    <Tag color='purple'>{item.star}</Tag>\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <Card\r\n                        cover={\r\n                            <img\r\n                                alt=\"example\"\r\n                                src=\"https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png\"\r\n                            />\r\n                        }\r\n                        actions={[\r\n                            <BarChartOutlined key=\"setting\" onClick={showDrawer} />,\r\n                            <EditOutlined key=\"edit\" />,\r\n                            <EllipsisOutlined key=\"ellipsis\" />,\r\n                        ]}\r\n                    >\r\n                        <Meta\r\n                            avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\r\n                            title={username}\r\n                            description={`${region === '' ? '全球' : region}  ${roleType}`} />\r\n                    </Card>,\r\n                </Col>\r\n            </Row>\r\n            <div style={{ height: '500px', width: '100%' }} ref={barDemo}></div>\r\n            <Drawer title=\"统计信息\" placement=\"right\" onClose={onClose} visible={visible} width={600} afterVisibleChange={showPie}>\r\n                <div style={{ height: '100%', width: '100%' }} ref={PieDemo}></div>\r\n            </Drawer>\r\n        </Fragment>\r\n    )\r\n}\r\n"],"names":["Meta","Card","Home","JSON","parse","localStorage","getItem","username","roleType","region","useState","viewList","setViewList","likeList","setLikeList","visible","setVisible","countInfo","setConuntInfo","pieInfo","setPieInfo","myChart","setMyChart","pieChart","setPieChart","barDemo","createRef","PieDemo","useEffect","axios","params","sortType","then","res","data","author","option","title","text","tooltip","trigger","axisPointer","type","label","show","grid","left","right","bottom","containLabel","xAxis","name","x","axisTick","alignWithLabel","yAxis","minInterval","series","barWidth","y","undefined","echarts","current","setOption","window","onresize","resize","Fragment","gutter","span","dataSource","renderItem","item","to","id","state","color","view","star","cover","alt","src","actions","onClick","avatar","description","style","height","width","ref","placement","onClose","afterVisibleChange","Chart","radius","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","TooltipComponent","GridComponent","BarChart","CanvasRenderer","TitleComponent","PieChart","LabelLayout","LegendComponent"],"sourceRoot":""}